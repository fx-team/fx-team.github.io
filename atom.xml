<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>fx-team</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://fx-team.github.io/"/>
  <updated>2018-02-21T01:58:13.219Z</updated>
  <id>https://fx-team.github.io/</id>
  
  <author>
    <name>fx-team</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>骨骼动画初体验</title>
    <link href="https://fx-team.github.io/2018/02/11/%E9%AA%A8%E9%AA%BC%E5%8A%A8%E7%94%BB%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>https://fx-team.github.io/2018/02/11/骨骼动画初体验/</id>
    <published>2018-02-11T08:08:18.000Z</published>
    <updated>2018-02-21T01:58:13.219Z</updated>
    
    <content type="html"><![CDATA[<p>前言：</p><p>运营需求的一个重要核心功能在于页面内指定内容可配置，比如：头图、不同情况的提示文案等都可以支持根据运营同学的配置随时更改，提供灵活性。<br>但是这种配置的方式也出现了遇到难题的情况， 图片中包含复杂特效的情况往往会选择直接用视觉同学导出的gif动图， 问题在于页面中涉及的动图量大加载成本大大提高的问题。<br>为了尝试既维持灵活可配 &amp; 减少加载成本，加下来介绍下骨骼动画的方案。</p><h1 id="H5动画-游戏-伴侣们"><a href="#H5动画-游戏-伴侣们" class="headerlink" title="H5动画/游戏 - 伴侣们"></a>H5动画/游戏 - 伴侣们</h1><ol><li><p>Three.js<br> Three.js 是被广泛了解的开源项目，他是基于 JS 的 3D 库，我们可以依赖他完成炫酷的3D展示效果。</p></li><li><p>Phaser<br> 桌面与移动端的 HTML5 游戏框架, 他提供了足够多的功能，支持我们完成H5游戏。</p></li><li><p>Pixi.js<br> 依赖于canvas的WebGL渲染器，官网中他对自己的定位就是渲染“引擎”，提供的 API 功能支持上， 不如 Phaser 等丰富，但是他在渲染部分做的很出众。同时 PIXI 也是 Phaser的 渲染内核;</p></li><li><p>小注释<br> 引擎：实现特定的功能，属于底层，和硬件驱动打交道<br> 框架：为了快速完成需求提供的功能集合，是对一系列功能的一层封装<br> 如果要说他们俩的关联点 =&gt; 引擎是为框架而服务的</p></li></ol><h1 id="PIXI-简单介绍"><a href="#PIXI-简单介绍" class="headerlink" title="PIXI 简单介绍"></a>PIXI 简单介绍</h1><p>PIXI 主打支持硬件 GPU 渲染的 WebGL API，依赖他你可在不了解 WebGL 的 API 或者处理浏览器兼容就可以创建丰富交互式图形的跨平台应用的渲染器(当然，更深入的了解和更好的使用也需要你对 WebGL 的基础)。之所以称他为跨平台应用是因为他可以自动识别浏览器是否支持 WebGL 否则降级使用了 canvas2D 进行视图渲染。</p><h2 id="三种渲染模式"><a href="#三种渲染模式" class="headerlink" title="三种渲染模式"></a>三种渲染模式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自动识别当前环境是否支持</span></span><br><span class="line">renderer = PIXI.autoDetectRenderer(</span><br><span class="line">  <span class="number">256</span>, <span class="number">256</span>,</span><br><span class="line">  &#123; <span class="attr">antialias</span>: <span class="literal">false</span>, <span class="attr">transparent</span>: <span class="literal">false</span>, <span class="attr">resolution</span>: <span class="number">1</span> &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 强制使用canvas</span></span><br><span class="line">renderer = <span class="keyword">new</span> PIXI.CanvasRenderer(<span class="number">256</span>, <span class="number">256</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 强制使用 WebGL</span></span><br><span class="line">renderer = <span class="keyword">new</span> PIXI.WebGLRenderer(<span class="number">256</span>, <span class="number">256</span>);</span><br></pre></td></tr></table></figure><h2 id="PIXI-简单示例"><a href="#PIXI-简单示例" class="headerlink" title="PIXI 简单示例"></a>PIXI 简单示例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建canvas元素</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> PIXI.Application();</span><br><span class="line"><span class="comment">// 可插入到DOM中</span></span><br><span class="line"><span class="built_in">document</span>.body.append(app.view);</span><br><span class="line"><span class="comment">// 加载需要的精灵</span></span><br><span class="line">PIXI.loader</span><br><span class="line">  .add(<span class="string">'animals'</span>, <span class="string">'../images/animals.png'</span>)</span><br><span class="line">  .load(<span class="function">(<span class="params">loader, resource</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 资源加载后处理事件</span></span><br><span class="line">    <span class="comment">// 创建图片</span></span><br><span class="line">    <span class="keyword">const</span> animals = <span class="keyword">new</span> PIXI.Sprite(resource.animals.texture);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置图片的位置</span></span><br><span class="line">    animals.x = app.renderer.width / <span class="number">2</span>;</span><br><span class="line">    animals.y = app.renderer.height / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置旋转中卫为图案中央</span></span><br><span class="line">    animals.anchor.x = <span class="number">0.5</span>;</span><br><span class="line">    animals.anchor.y = <span class="number">0.5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加到舞台</span></span><br><span class="line">    app.stage.addChild(animals);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听帧更新 以下为进行旋转</span></span><br><span class="line">    app.ticker.add(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      animals.rotation += <span class="number">0.01</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p><a href="http://pixijs.io/examples/#/basics/container.js" target="_blank" rel="noopener">更多PIXI示例代码</a></p><h2 id="PIXI-的渲染压力测试结果"><a href="#PIXI-的渲染压力测试结果" class="headerlink" title="PIXI 的渲染压力测试结果"></a>PIXI 的渲染压力测试结果</h2><p>同样环境条件下，对5千张，1万，2万张图片进行循环渲染,进行帧率数据的比较；如图可见，PIXI 作为渲染器的表现是很优秀的。</p><img src="/2018/02/11/骨骼动画初体验/pixi.png" title="渲染压力测试结果"><h1 id="PIXI-SPINE-骨骼动画"><a href="#PIXI-SPINE-骨骼动画" class="headerlink" title="PIXI-SPINE 骨骼动画"></a>PIXI-SPINE 骨骼动画</h1><h2 id="帧动画-amp-骨骼动画-区别"><a href="#帧动画-amp-骨骼动画-区别" class="headerlink" title="帧动画 &amp; 骨骼动画 区别"></a>帧动画 &amp; 骨骼动画 区别</h2><ul><li><p>帧动画：帧动画是对角色的特定姿势的快照， 计算的依照点在于设备的帧率，所以他的流畅性和平滑度效果会取决于用户的设备出现不同</p></li><li><p>骨骼动画：把角色的身体各部分进行拆分，绑定到一根根互相作用，互相连接的“骨头”上，控制其中某一个骨骼的位置、旋转、放大、缩小… 带动其关联的部分随之移动和变化，达到想要的动画效果。</p></li></ul><h2 id="骨骼优化的优势"><a href="#骨骼优化的优势" class="headerlink" title="骨骼优化的优势"></a>骨骼优化的优势</h2><ul><li><p>更少的美术资源： 一块块小部件的结合拼凑成每帧画面的不同效果，不再需要每一帧完成图片进行切换；</p></li><li><p>体积小：用 JSON 文件代替图片资源进行控制，大大节省了资源大小</p></li><li><p>流畅性：JSON  配置文件的设置节点是时间帧，骨骼动画是根据差值计算出中间帧，保证动画保持的更流畅；</p></li><li><p>附件：这是一个集合的概念，使得对特定某个区域的切换控制，提供了方便；</p></li><li><p>混合动画：一个 JSON 文件可同时这是多个动画，这些动画可混合使用，同时进行多个动画；</p></li><li><p>程序可控：动画播放的整体速度、旋转，或者根据用户的行为去触发再去控制动画的播放等 都是方便可控的。</p></li></ul><h2 id="骨骼动画解剖"><a href="#骨骼动画解剖" class="headerlink" title="骨骼动画解剖"></a>骨骼动画解剖</h2><img src="/2018/02/11/骨骼动画初体验/spine.png" title="spine解剖"><p>骨骼动画的配置文件由以上几部分构成</p><ul><li><p>Bone: 骨头 是骨骼动画的基础，用来计算位置，每个骨头会有自己的位移缩放和旋转属性，骨头也可以有自己的子节点，最终形成树形结构；</p></li><li><p>Slot: 插槽 是骨头上的挂载点，Slot 是用来标记特殊的骨头位置，也可以说重要的骨头节点就是 Slot， 插槽是用来控制描画的；</p></li><li><p>附件：是挂在插槽上的内容，可以是图片、人物外表等的表示；</p></li><li><p>皮肤：皮肤是一套附件的结合，皮肤的切换给动画带来了更多的灵活性；</p></li><li><p>动画：是根据时间轴控制的骨头状态的列表，每个动画都会有自己特属的 name, 利用此属性可指定特定的动画名称；</p></li></ul><h2 id="播放骨骼动画流程"><a href="#播放骨骼动画流程" class="headerlink" title="播放骨骼动画流程"></a>播放骨骼动画流程</h2><p>骨骼动画配置文件分析完， 接下来就可以开始引用啦~ </p><img src="/2018/02/11/骨骼动画初体验/step.png" title="加载使用流程"><p>直接上代码是不是应该更容易理解</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 canvas 并添加到 DOM</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> PIXI.Application(<span class="number">750</span>, <span class="number">1334</span>);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(app.view);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载 JSON 文件，绑定加载完之后的方法</span></span><br><span class="line">PIXI.loader</span><br><span class="line">    .add(<span class="string">'loading'</span>, <span class="string">'./loading.json'</span>)</span><br><span class="line">    .load(onAssetsLoaded);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onAssetsLoaded</span> (<span class="params">loader, res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 设置精灵 并且 设置他的位置</span></span><br><span class="line">    <span class="keyword">const</span> loading = <span class="keyword">new</span> PIXI.spine.Spine(res.loading.spineData);</span><br><span class="line">    loading.x = app.screen.width / <span class="number">2</span>;</span><br><span class="line">    loading.y = app.screen.height;</span><br><span class="line">    <span class="comment">// 添加到舞台中</span></span><br><span class="line">    app.stage.addChild(loading);</span><br><span class="line">    <span class="comment">// 开始循环播放 play 的动画</span></span><br><span class="line">    loading.state.setAnimation(<span class="number">0</span>, <span class="string">'play'</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用体验-感想"><a href="#使用体验-感想" class="headerlink" title="使用体验/感想"></a>使用体验/感想</h1><ol><li><p>图片超时处理: PIXI 的图片加载是使用 new Image()， 再触发 img.onload 的时候才会执行事件，如果我们没有显性处理 err 的情况， 就会一直处在等待状态不继续；</p></li><li><p>资源拆分: 应根据实际情景，进行资源拆分和合并。不同场景用不同的配置文件进行区分，根据所需情况处理预加载 ；同一场景下不同动画文件可进行配置文件的合并， 用动画名称进行区分触发。<br>引入 JSON 文件，pixi-spine 会读取文件之后转化为 js 对象等待被调用，因此对可按需再加载的部分进行拆分，有利于减少js的工作量及占用的内存，也能提高访问的初始速度</p></li><li><p>独立到 DOM: 不管是用 WebGL 还是 canvas 渲染，都是依赖于 canvas 作为画布，因此我们也可以灵活利用 DOM，将不变的背景部分抽离出画布， 独立到 节点中进行控制；</p></li><li><p>GPU 部分: texture 是 GPU 运算中非常实用也常用的数据结构，他可以存储图片数据; z在使用 WebGL进行渲染时，纹理图占用的是 GPU 内存，在确定这些纹理不在被使用时，我们可以手动执行 PIXI 的 dispose 方法主动释放纹理，保证当前占用的 GPU 中不包含多余纹理；</p></li></ol><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>几乎100%复原动效同学的设计稿并且以尽可能高效的完成，最大限度减少和动效同学确认并调整动效效果的方面，个人认为骨骼动画的前景很乐观；结合我们的配置平台，也相信能快速更灵活的进行更新替换；后续会更深入的了解实现的更多细节和原理部分，尝试更多切入实际问题的实际改良方案，争取做到更好。欢迎大家踊跃提出疑问和建议，更多的尝试和心得会持续进行更新。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前言：&lt;/p&gt;
&lt;p&gt;运营需求的一个重要核心功能在于页面内指定内容可配置，比如：头图、不同情况的提示文案等都可以支持根据运营同学的配置随时更改，提供灵活性。&lt;br&gt;但是这种配置的方式也出现了遇到难题的情况， 图片中包含复杂特效的情况往往会选择直接用视觉同学导出的gif动图，
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端技术周刊 - 2018/02/09</title>
    <link href="https://fx-team.github.io/2018/02/09/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%91%A8%E5%88%8A-2018-02-09/"/>
    <id>https://fx-team.github.io/2018/02/09/前端技术周刊-2018-02-09/</id>
    <published>2018-02-09T03:21:17.000Z</published>
    <updated>2018-02-11T07:57:39.478Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s?__biz=MTEwNTM0ODI0MQ==&amp;mid=2653435164&amp;idx=1&amp;sn=70f563a0717b6377d19644264111e6f1" target="_blank" rel="noopener">腾讯社交网络图片带宽优化技术演进之路</a><br><em>为进一步降低运营带宽成本，减小用户访问流量及提升页面加载速度，社交网络 CDN运维紧跟行业图片优化趋势，创新引入WebP、SharpP、自适应分辨率、Guetzli等图像压缩技术到现网，经过三年多的多部门联合攻关，已逐渐形成一套覆盖全图片类型（JPEG、JPG、PNG、WebP、GIF）多场景的图片压缩运营体系，适用于各类型终端，每年节约外网带宽几百G。</em></p><p><a href="https://github.com/berwin/Blog/issues/20" target="_blank" rel="noopener">聊聊我对现代前端框架的认知</a><br><em>客观的分析了常见的前端框架，对于前端框架不要一味追新，更要看到它的本质，透过现象看本质才不至于被表面所迷惑。</em></p><p><a href="http://blog.poetries.top/2018/02/02/vsc-config/" target="_blank" rel="noopener">VS Code常用插件</a><br><em>整理了一些 VS Code 常用插件。</em></p><p><a href="http://www.aliued.com/?p=4162" target="_blank" rel="noopener">别再让你的web页面在用户浏览器端裸奔</a><br><em>如果笼统的将web开发分为前端和后端开发，那后端则数据的生产，而前端则负责数据的展现。后端代码跑在我们业务方自己的服务器上，对于代码运行过程中产生的日志，具备天然的低成本获取优势，在最原始的状态下，我们可以直接登录我们的应用服务器去捞取日志，定位线上问题。不过，事实上我们会更加依赖我们已经基于日志打造的一系列成熟的后端监控系统，来监控后端应用代码运行过程中的健壮度。</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MTEwNTM0ODI0MQ==&amp;amp;mid=2653435164&amp;amp;idx=1&amp;amp;sn=70f563a0717b6377d19644264111e6f1&quot; target=&quot;
      
    
    </summary>
    
    
      <category term="技术周刊" scheme="https://fx-team.github.io/tags/%E6%8A%80%E6%9C%AF%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>webpack 优化(1)</title>
    <link href="https://fx-team.github.io/2018/02/02/webpack%E4%BC%98%E5%8C%96(1)/"/>
    <id>https://fx-team.github.io/2018/02/02/webpack优化(1)/</id>
    <published>2018-02-02T08:30:58.000Z</published>
    <updated>2018-02-11T07:57:39.477Z</updated>
    
    <content type="html"><![CDATA[<h1 id="webpack-优化"><a href="#webpack-优化" class="headerlink" title="webpack 优化"></a>webpack 优化</h1><p>前一段时间一直在写后台管理系统（vue + elementUI + webpack），数下来，虽然不多，也有 3 个了；由于是单页应用，每次到发布的时候，都会耗费大量的时间对代码进行编译压缩，所以时不时都会思考着如何才能优化这个过程；谷歌和度娘就像是哆啦 A 梦的奇幻袋，总能给大家带来意想不到的惊喜，当然，这次也不例外。</p><h2 id="happypack"><a href="#happypack" class="headerlink" title="happypack"></a>happypack</h2><p><a href="https://www.npmjs.com/package/happypack" target="_blank" rel="noopener">npm</a>的官方解释比较简单：通过并行转换文件以使 webpack 的构建速度更快；说白了就是利用多线程的优势。</p><p>它提供了一个插件和一个加载器，两个并用才能启用 happypack。</p><p>迫不及待了已经，赶紧上代码了 →_→</p><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p><code>require(&#39;os&#39;)</code>模块想必大家都不陌生了，通过<code>os.cpus().length</code>，获得线程的长度，供 happypack 使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HappyPack = <span class="built_in">require</span>(<span class="string">'happypack'</span>);</span><br><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">'os'</span>);</span><br><span class="line"><span class="comment">// 启动线程池</span></span><br><span class="line"><span class="keyword">const</span> HappyThreadPool = HappyPack.ThreadPool(&#123; <span class="attr">size</span>: os.cpus().length &#125;);</span><br></pre></td></tr></table></figure><h3 id="插件-加载器"><a href="#插件-加载器" class="headerlink" title="插件+加载器"></a>插件+加载器</h3><p>一个静态对象代表一个加载器入口，每个对象里面有重要的三个字段，<code>id</code>表示唯一标识，<code>threadPool</code>表示 happypack 开启的线程数量，<code>loaders</code>表示真正需要加载的加载器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">      id: <span class="string">'jsx'</span>,</span><br><span class="line">      threadPool: HappyThreadPool,</span><br><span class="line">      loaders: [<span class="string">'babel-loader'</span>, path.join(__dirname, <span class="string">'loader/debug-loader'</span>)]</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>咦？？？大家是不是发现了什么 → 有点陌生的<code>debug-loader</code>加载器，话说起来，这个是涛哥提供的 idea。</p><p>引申一下，由于 mock 数据到后期异常庞大（夸张一下），被打包进生产环境的 mock 数据被涛哥无情的揪了出来，真挚的摆在我的面前，尘世间最痛苦的事情是我没有能力失去它（mock 数据），如果上天再给我一次机会的话，我会说：我终于知道用<code>debug-loader</code>了。</p><p>涛哥建议我参考公司内部的配置工具，在生产环境中，针对特定的引入参数，对引入文件进行剔除。</p><p>迫不及待了，上代码啊啊啊啊啊啊啊~</p><p>代码简简单单，<code>source</code>入参代表文件内容，<code>resourceQuery</code>是<code>import &#39;filepath?default&#39;</code>中<code>?</code>后边的部分（包括<code>?</code>）。</p><p>我这里的判断逻辑是，带有<code>?debug</code>字样的引入文件，只有在非生产环境中的 mock 环境才被引入（有点拗口）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">source</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> _this = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">const</span> &#123; resourceQuery &#125; = _this;</span><br><span class="line">  <span class="keyword">if</span> (resourceQuery === <span class="string">'?debug'</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; NODE_ENV, mock &#125; = process.env;</span><br><span class="line">    <span class="keyword">return</span> NODE_ENV !== <span class="string">'production'</span> &amp;&amp; !!mock ? source : <span class="string">''</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> source;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>重点在于，loaders 字段中的值<code>[&#39;happypack/loader?id=jsx&#39;]</code>，其中，通过<code>id=jsx</code>进行 happypack 插件中的加载器替换。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        loaders: [<span class="string">'happypack/loader?id=jsx'</span>],</span><br><span class="line">        include: [</span><br><span class="line">          resolve(<span class="string">'src'</span>),</span><br><span class="line">          resolve(<span class="string">'test'</span>),</span><br><span class="line">          resolve(<span class="string">'node_modules/webpack-dev-server/client'</span>)</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>敬请期待下一节 webpack 优化(2) Dllplugin ^_^</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;webpack-优化&quot;&gt;&lt;a href=&quot;#webpack-优化&quot; class=&quot;headerlink&quot; title=&quot;webpack 优化&quot;&gt;&lt;/a&gt;webpack 优化&lt;/h1&gt;&lt;p&gt;前一段时间一直在写后台管理系统（vue + elementUI + webp
      
    
    </summary>
    
    
      <category term="happypack" scheme="https://fx-team.github.io/tags/happypack/"/>
    
  </entry>
  
  <entry>
    <title>前端技术周刊 - 2018/02/02</title>
    <link href="https://fx-team.github.io/2018/02/02/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%91%A8%E5%88%8A-2018-02-02/"/>
    <id>https://fx-team.github.io/2018/02/02/前端技术周刊-2018-02-02/</id>
    <published>2018-02-02T07:09:55.000Z</published>
    <updated>2018-02-11T07:57:39.478Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/32117359" target="_blank" rel="noopener">CSS工程化演进</a><br><em>CSS 是 Web 开发中不可或缺的一部分，在前端工程化的不断进步的今天，一方面在 CSS 特性随着规范的升级越来越丰富，另一方面，前端业务复杂性的增加带来的工程愈加庞大，驱使者开发者不断寻找CSS工程化的最佳实践。</em></p><p><a href="https://zhuanlan.zhihu.com/p/33199749" target="_blank" rel="noopener">Chrome v65 将支持 CSS Paint API</a><br><em>Chrome v65 中将会支持 CSS Paint API。</em></p><p><a href="https://zhuanlan.zhihu.com/p/33179166" target="_blank" rel="noopener">境外业务性能优化实践</a><br><em>这篇文章结合境外业务特点，从网络优化、前端优化、后端优化几个角度介绍了境外业务在性能优化上的一些实践，重点篇幅放在了网络优化部分。</em></p><p>WeexConf 2018干货系列</p><ul><li><a href="https://mp.weixin.qq.com/s/Sa3FcIKvWSDq_zOlQZ9d6Q" target="_blank" rel="noopener">Weex + Ui</a></li><li><a href="https://mp.weixin.qq.com/s/shC1Ydakvl-n2KoEWbMsTw" target="_blank" rel="noopener">Weex技术演进</a></li><li><a href="https://mp.weixin.qq.com/s/SoctOi9XG39QQTmfPARWgA" target="_blank" rel="noopener">Weex技术演进第二篇</a></li></ul><p><a href="https://www.baidufe.com/item/c48cdd8e24e5ace8cef2.html" target="_blank" rel="noopener">技术工程师成长之其中一道</a><br><em>从技术工程师各个阶段、角度对如何成长进行了详细的阐述，内容质朴，对各个阶段的技术工程师都会有一定的帮助。</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/32117359&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CSS工程化演进&lt;/a&gt;&lt;br&gt;&lt;em&gt;CSS 是 Web 开发中不可或缺的一部分，在前端工程化的不断进步的今天，一
      
    
    </summary>
    
    
      <category term="技术周刊" scheme="https://fx-team.github.io/tags/%E6%8A%80%E6%9C%AF%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>koa 源码解析(1)</title>
    <link href="https://fx-team.github.io/2018/02/01/koa%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90(1)/"/>
    <id>https://fx-team.github.io/2018/02/01/koa源码解析(1)/</id>
    <published>2018-02-01T07:55:09.000Z</published>
    <updated>2018-02-11T07:57:39.476Z</updated>
    
    <content type="html"><![CDATA[<h1 id="koa"><a href="#koa" class="headerlink" title="koa"></a>koa</h1><p>koa 是由 Express 原班人马打造的，致力于成为一个更小、更富有表现力、更健壮的 Web 框架。 使用 koa 编写 web 应用，通过组合不同的 generator，可以免除重复繁琐的回调函数嵌套， 并极大地提升错误处理的效率。koa 不在内核方法中绑定任何中间件， 它仅仅提供了一个轻量优雅的函数库，使得编写 Web 应用变得得心应手。</p><p>安装、版本依赖请<a href="https://koa.bootcss.com/" target="_blank" rel="noopener">点我点我</a> ~ O(∩_∩)O 哈哈~</p><p>开篇怎能没有 hello world 呢？→_→</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.body = <span class="string">'Hello World'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不满意 换个口味吧？</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.body = <span class="string">'Hello World'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">http.createServer(app.callback()).listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h2 id="koa-图解"><a href="#koa-图解" class="headerlink" title="koa 图解"></a>koa 图解</h2><p>图中一层一层的洋葱圈，其实就是每一个中间件函数<code>middlewarefn(ctx, next)</code>，有的是系统中间件，有的是用户中间件，这取决于用户如何定义中间件在系统中的功能层级（都是通过 app.use()加载，koa 内部不封装任何中间件函数）。</p><p>路线分析：外层到内层-对 request 请求进行处理，内层再到外层-对 response 请求进行处理。</p><p>代码分析：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 某一个中间件函数</span></span><br><span class="line"><span class="keyword">async</span> middlewarefn (ctx, next) &#123;</span><br><span class="line">  <span class="comment">// 外层到内层的代码</span></span><br><span class="line">  ......</span><br><span class="line">  <span class="keyword">await</span> next();</span><br><span class="line">  <span class="comment">// 内层到外层的代码</span></span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2018/02/01/koa源码解析(1)/koaStructure.png" title="koa 结构"><h2 id="koa-核心文件"><a href="#koa-核心文件" class="headerlink" title="koa 核心文件"></a>koa 核心文件</h2><p>有且仅有 4 个（精简、流畅、易用）</p><ul><li>application.js</li><li>context.js</li><li>request.js</li><li>response.js</li></ul><h3 id="application-js"><a href="#application-js" class="headerlink" title="application.js"></a>application.js</h3><p>今天主要解剖一下这个货 ^_^</p><p>继承自 Emitter 类，主要用于监听 error。</p><p>利用<code>require(&#39;debug&#39;)(&#39;koa:application&#39;)</code>模块，把所有的 debug 都输出在 koa:application 域下，便于查看。</p><p>构造函数的参数简单易懂：</p><ul><li>proxy false</li><li>middleware []</li><li>subdomainOffset 2</li><li>env process.env.NODE_ENV || ‘development’</li><li>context 上下文对象</li><li>request 请求级别对象</li><li>response 请求级别对象</li></ul><p>应用实例。从用户的角度出发，从事的工作是暴露给用户可使用的方法；</p><p>例如：</p><ul><li>listen()</li><li>use()</li><li>toJSON()</li><li>inspect()</li></ul><h4 id="listen"><a href="#listen" class="headerlink" title="listen()"></a>listen()</h4><p>不言而喻，最基本的功能。可以看出，核心是调用了<code>this.callback()</code>方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">listen(...args) &#123;</span><br><span class="line">  debug(<span class="string">'listen'</span>);</span><br><span class="line">  <span class="keyword">const</span> server = http.createServer(<span class="keyword">this</span>.callback());</span><br><span class="line">  <span class="keyword">return</span> server.listen(...args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="use"><a href="#use" class="headerlink" title="use()"></a>use()</h4><p><code>require(&#39;is-generator-function&#39;)</code>模块，可以判定该函数是否是生成器函数，进而使用<code>require(&#39;koa-convert&#39;)</code>模块把生成器函数转换为可解析的 Promise 函数。有兴趣的同学可以研究一下这 2 个模块。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isGeneratorFunction(fn)) &#123;</span><br><span class="line">  fn = convert(fn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.middleware.push(fn);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br></pre></td></tr></table></figure><h4 id="toJSON"><a href="#toJSON" class="headerlink" title="toJSON()"></a>toJSON()</h4><p><code>require(&#39;only&#39;)</code>模块，返回该对象中指定的<key, value="">，形成一个新的对象。参数可以使数组（数组中是 key），也可以是字符串（用空格隔开 key）。</key,></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> only(<span class="keyword">this</span>, [<span class="string">'subdomainOffset'</span>, <span class="string">'proxy'</span>, <span class="string">'env'</span>]);</span><br></pre></td></tr></table></figure><h4 id="inspect"><a href="#inspect" class="headerlink" title="inspect()"></a>inspect()</h4><p>直观理解：返回 toJSON()方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.toJSON();</span><br></pre></td></tr></table></figure><p>从功能性角度来讲，他主要的使命是：</p><ul><li>callback()</li><li>createContext()</li><li>handleRequest()</li><li>respond()</li><li>onerror()</li></ul><h4 id="callback"><a href="#callback" class="headerlink" title="callback()"></a>callback()</h4><p><code>require(&#39;koa-compose&#39;)</code>模块，把列表中的中间件按先后顺序用 Promise 封装；next()方法返回的恰恰是上一个函数执行的环境，只不过就是把中间件函数变成了 middleware 数组中的下一个，说白了就是递归执行。该模块的核心代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (i &lt;= index) <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'next() called multiple times'</span>))</span><br><span class="line">      index = i</span><br><span class="line">      <span class="keyword">let</span> fn = middleware[i]</span><br><span class="line">      <span class="keyword">if</span> (i === middleware.length) fn = next</span><br><span class="line">      <span class="keyword">if</span> (!fn) <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve()</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(fn(context, <span class="function"><span class="keyword">function</span> <span class="title">next</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> dispatch(i + <span class="number">1</span>)</span><br><span class="line">        &#125;))</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着就是创建上下文环境 createContext()，然后执行 handlerequest()方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">callback()</span><br><span class="line">  <span class="keyword">const</span> fn = compose(<span class="keyword">this</span>.middleware);</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.listeners(<span class="string">'error'</span>).length) <span class="keyword">this</span>.on(<span class="string">'error'</span>, <span class="keyword">this</span>.onerror);</span><br><span class="line">  <span class="keyword">const</span> handleRequest = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> ctx = <span class="keyword">this</span>.createContext(req, res);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.handleRequest(ctx, fn);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> handleRequest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="createContext"><a href="#createContext" class="headerlink" title="createContext()"></a>createContext()</h4><p>乍一看，我的个神啊，这么多，密密麻麻，不用害怕，其实真正核心的就只有这几行：</p><p>把 application 的实例赋值给上下文 context，把 http 中的 req,res 赋值给上下文 context；接下来把 req，res 同时赋值给 request.js 和 response.js 暴露出来的静态对象（便于使用）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">context.app = request.app = response.app = <span class="keyword">this</span>;</span><br><span class="line">context.req = request.req = response.req = req;</span><br><span class="line">context.res = request.res = response.res = res;</span><br><span class="line">request.ctx = response.ctx = context;</span><br><span class="line">request.response = response;</span><br><span class="line">response.request = request;</span><br></pre></td></tr></table></figure><p>其余的代码很好理解，上下文对象 ctx 加入 cookie，ip, originalUrl, accept, state 参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">createContext(req, res) &#123;</span><br><span class="line">  <span class="keyword">const</span> context = <span class="built_in">Object</span>.create(<span class="keyword">this</span>.context);</span><br><span class="line">  <span class="keyword">const</span> request = context.request = <span class="built_in">Object</span>.create(<span class="keyword">this</span>.request);</span><br><span class="line">  <span class="keyword">const</span> response = context.response = <span class="built_in">Object</span>.create(<span class="keyword">this</span>.response);</span><br><span class="line">  context.app = request.app = response.app = <span class="keyword">this</span>;</span><br><span class="line">  context.req = request.req = response.req = req;</span><br><span class="line">  context.res = request.res = response.res = res;</span><br><span class="line">  request.ctx = response.ctx = context;</span><br><span class="line">  request.response = response;</span><br><span class="line">  response.request = request;</span><br><span class="line">  context.originalUrl = request.originalUrl = req.url;</span><br><span class="line">  context.cookies = <span class="keyword">new</span> Cookies(req, res, &#123;</span><br><span class="line">  keys: <span class="keyword">this</span>.keys,</span><br><span class="line">  secure: request.secure</span><br><span class="line">  &#125;);</span><br><span class="line">  request.ip = request.ips[<span class="number">0</span>] || req.socket.remoteAddress || <span class="string">''</span>;</span><br><span class="line">  context.accept = request.accept = accepts(req);</span><br><span class="line">  context.state = &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="respond"><a href="#respond" class="headerlink" title="respond()"></a>respond()</h4><p>分别根据 buffer、string 和 stream 流来区分对待；默认 JSON 封装数据，再顺便求一个字节长度。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Buffer.isBuffer(body)) <span class="keyword">return</span> res.end(body);</span><br><span class="line"><span class="keyword">if</span> (<span class="string">'string'</span> == <span class="keyword">typeof</span> body) <span class="keyword">return</span> res.end(body);</span><br><span class="line"><span class="keyword">if</span> (body <span class="keyword">instanceof</span> Stream) <span class="keyword">return</span> body.pipe(res); <span class="comment">// body: json</span></span><br><span class="line">body = <span class="built_in">JSON</span>.stringify(body);</span><br><span class="line"><span class="keyword">if</span> (!res.headersSent) &#123;</span><br><span class="line">  ctx.length = Buffer.byteLength(body);</span><br><span class="line">&#125;</span><br><span class="line">res.end(body);</span><br></pre></td></tr></table></figure><h4 id="onerror"><a href="#onerror" class="headerlink" title="onerror()"></a>onerror()</h4><p>只打印 stack，默认在开头加一个空格，自己也不能解惑。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> msg = err.stack || err.toString();</span><br><span class="line"><span class="built_in">console</span>.error();</span><br><span class="line"><span class="built_in">console</span>.error(msg.replace(<span class="regexp">/^/gm</span>, <span class="string">' '</span>));</span><br><span class="line"><span class="built_in">console</span>.error();</span><br></pre></td></tr></table></figure><p>敬请期待下一节 koa 源码分析(2) request.js ^_^</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;koa&quot;&gt;&lt;a href=&quot;#koa&quot; class=&quot;headerlink&quot; title=&quot;koa&quot;&gt;&lt;/a&gt;koa&lt;/h1&gt;&lt;p&gt;koa 是由 Express 原班人马打造的，致力于成为一个更小、更富有表现力、更健壮的 Web 框架。 使用 koa 编写 web
      
    
    </summary>
    
    
      <category term="application.js" scheme="https://fx-team.github.io/tags/application-js/"/>
    
  </entry>
  
  <entry>
    <title>PWA 方案相关技术分享</title>
    <link href="https://fx-team.github.io/2018/01/28/PWA%20%E6%96%B9%E6%A1%88%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    <id>https://fx-team.github.io/2018/01/28/PWA 方案相关技术分享/</id>
    <published>2018-01-28T15:33:03.000Z</published>
    <updated>2018-02-11T07:57:39.475Z</updated>
    
    <content type="html"><![CDATA[<p>前言：<br>上周做了一个预约健身卡的项目，在领导的指引下使用了 <a href="https://lavas.baidu.com" target="_blank" rel="noopener">LAVAS</a> 框架，这个框架的主要特点就是可以直接生成一套成熟的支持 PWA 的网站。<br>在开发过程中，发现 PWA 方案的主要核心技术在于 Service Worker，我下面将从 PWA 方案的简介、PWA 方案的相关技术等2个方向简单介绍一下我对于本次开发的收获。<br>在介绍完这些技术后，我将在最后的篇幅里介绍一个简单 PWA 方案的详细实现。<br><a id="more"></a></p><h1 id="什么是-PWA？"><a href="#什么是-PWA？" class="headerlink" title="什么是 PWA？"></a>什么是 PWA？</h1><p>Progressive Web App, 简称 PWA，是提升 Web App 的体验的一种新方法，能给用户原生应用的体验。<br>PWA 能做到原生应用的体验不是靠特指某一项技术，而是经过应用一些新技术进行改进，在安全、性能和体验三个方面都有很大提升，PWA 本质上是 Web App，借助一些新技术也具备了 Native App 的一些特性，兼具 Web App 和 Native App 的优点。</p><h1 id="相关技术"><a href="#相关技术" class="headerlink" title="相关技术"></a>相关技术</h1><p>PWA 方案的关键技术：Service Worker。<br>当用户打开我们站点时（从桌面 icon 或者从浏览器），通过 Service Worker 能够让用户在网络条件很差的情况下也能瞬间加载并且展现。<br>Service Worker 是用 JavaScript 编写的 JS 文件，能够代理请求，并且能够操作浏览器缓存，通过将缓存的内容直接返回，让请求能够瞬间完成。开发者可以预存储关键文件，可以淘汰过期的文件等等，给用户提供可靠的体验。<br>在介绍 Service Worker 之前，需要一些必要的知识储备，下面首先介绍的是使用 Service Worker 技术时还涉及的相关其他技术 API，主要有全局作用域 self、Cache Storage 和 Cache 对象。</p><h2 id="全局作用域self"><a href="#全局作用域self" class="headerlink" title="全局作用域self"></a>全局作用域self</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span> === self                  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">window</span>.window === <span class="built_in">window</span>.self    <span class="comment">// true</span></span><br><span class="line"><span class="built_in">window</span>.self === self             <span class="comment">// true</span></span><br><span class="line"><span class="built_in">window</span>.window === self           <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>从上图可以看出传统 Web 页面中，window 和 self是完全相等的。<br>传统的 Web 页面的 JavaScript 脚本是单线程的，这个线程主要与浏览器窗口打交道，主要作用就是实现浏览器窗体内的元素交互效果，因此只要是全局对象，都可以使用 window 对象来获取。<br>Service Worker 是运行在浏览器上开辟的一个新线程，浏览器背后悄悄运行的线程，所以没有 window 对象，会使用 self 获取当前运行环境的上下文，即使用 self 来表示全局作用域。</p><h2 id="Cache-Storage"><a href="#Cache-Storage" class="headerlink" title="Cache Storage"></a>Cache Storage</h2><p>Cache Storage 可以用变量 caches 来引用，以下是 Cache Storage 的主要 API 介绍</p><ul><li>caches.open(cacheName) 用于获取一个 Cache 对象实例。</li><li>caches.match() 用于检查 CacheStorage 中是否存在以 Request 为 key 的 Cache 对象。</li><li>caches.has() 用于检查是否存在指定名称的 Cache 对象。</li><li>caches.keys() 用于返回 CacheStorage 中所有 Cache 对象的 cacheName 列表。</li><li>caches.delete() 用于删除指定 cacheName 的 Cache 对象。  </li></ul><p>Cache Storage 通过 cacheName 标记缓存版本，所以就会存在多个版本的 Cache Storage 资源。为什么需要 cacheName 来标记版本呢？<br>假设当前域名下所有的覆盖式发布的静态资源和接口数据全部存储在同一个 cacheName 里面，业务部署更新后，无法识别旧的冗余资源，单靠前端无法完全清除。这是因为 Service Worker 不知道完整的静态资源路径表，只能在客户端发起请求时去做判断，那些当前不会用到的资源不代表以后一定不会使用到。假如静态资源是非覆盖式发布，那么冗余的资源就更多了。这里要特别注意的是，Cache 不会过期，只能显式删除。</p><h2 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h2><p>规范里 Cache 对应内核的 ServiceWorkerCache 对象，提供了已缓存的 Request / Response 对象体的存储管理机制。它提供了一系列管理存储的 JS 接口：</p><ul><li>cache.put() 用于把 Request / Response 对象体放进指定的 Cache。</li><li>cache.add() 用于获取一个 Request 的 Response，并将 Request / Response 对象体放进指定的 Cache。注：等价于 fetch(request) + Cache.put(request, response)。</li><li>cache.addAll() 用于获取一组 Request 的 Response，并将该组 Request / Response 对象体放进指定的 Cache。</li><li>cache.keys() 用于获取 Cache 中所有 key。</li><li>cache.match() 用于查找是否存在以 Request 为 key 的 Cache 对象。</li><li>cache.matchAll() 用于查找是否存在一组以 Request 为 key 的 Cache 对象组。</li><li>cache.delete() 用于删除以 Request 为 key 的 Cache Entry。注意，Cache 不会过期，只能显式删除 。</li></ul><h2 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h2><h3 id="Service-Worker-的概念和用法"><a href="#Service-Worker-的概念和用法" class="headerlink" title="Service Worker 的概念和用法"></a>Service Worker 的概念和用法</h3><p>下面我们将进入主要部分，Service Worker 的介绍和用法。<br>我们平常浏览器窗口中跑的页面运行的是主 JavaScript 线程，DOM 和 window 全局变量都是可以访问的。而 Service Worker 是走的另外的线程，可理解为在浏览器背后默默运行的一个线程，脱离浏览器窗体，因此，window 以及 DOM 都是不能访问的，此时我们可以使用之前讲到的 self 访问全局上下文。<br>由于 Service Worker 走的是另外的线程，因此，Service Worker 不会阻塞主 JavaScript 线程，也就是不会引起浏览器页面加载的卡顿之类。同时，由于 Service Worker 设计基于 Promise，完全异步，同步 API（如 XHR 和 localStorage ）不能在 Service Worker 中使用。<br>Service Worker 对我们的协议也有要求，就是必须是 https 协议的，不过本地开发 Service Worker 在 http://<span></span>localhost 或者 http://<span></span>127.0.0.1 这种本地环境可以直接运行。如果想线上真是环境预览，可以考虑借助 Github pages，因为它是 https 协议的。</p><h3 id="Service-Worker的生命周期"><a href="#Service-Worker的生命周期" class="headerlink" title="Service Worker的生命周期"></a>Service Worker的生命周期</h3><p>Service Worker 注册时候的生命周期是这样的：</p><ol><li>下载注册的JS文件，并解析执行</li><li>安装注册</li><li>安装成功或等待</li><li>激活中</li><li>激活成功</li><li>销毁</li></ol><p>一旦安装完成，如果注册的JS没有变化，则直接显示当前激活态。<br>用线把整个流程链接起来就是下面这样：<br><img src="/2018/01/28/PWA%20方案相关技术分享/sw.png" title="Service Worker 生命周期示意图"><br>其中任何一个步骤失败都将进入销毁（redundant）。</p><h3 id="Service-Worker-的对应的事件名"><a href="#Service-Worker-的对应的事件名" class="headerlink" title="Service Worker 的对应的事件名"></a>Service Worker 的对应的事件名</h3><ol><li>self.addEventListener(‘install’, function(event) { /<em> 安装后… </em>/ });</li><li>self.addEventListener(‘activate’, function(event) { /<em> 激活后… </em>/ });</li><li>elf.addEventListener(‘fetch’, function(event) { /<em> 请求后… </em>/ });</li></ol><p>install 事件是服务工作线程获取的第一个事件，并且它仅发生一次。<br>传递到 installEvent.waitUntil() 的一个 promise 可表明安装的持续时间以及安装是否成功。<br>在成功完成安装并处于“activate 活动状态”之前，服务工作线程不会收到 fetch 和 push 等事件。<br>默认情况下，不会通过服务工作线程获取页面，除非页面请求本身需要执行服务工作线程。 因此，您需要刷新页面以查看服务工作线程的影响。<br>clients.claim() 可替换此默认值，并控制未控制的页面。</p><h1 id="简单的-PWA-方案"><a href="#简单的-PWA-方案" class="headerlink" title="简单的 PWA 方案"></a>简单的 PWA 方案</h1><p>通过以上介绍，我们就可以来实现一个简单的支持 PWA 的网站啦！下面我将把实现的代码一一罗列出来。<br>主要使用的技术：</p><ol><li>App Manifest </li><li>Service Worker</li><li>cacheStorage</li></ol><h2 id="App-Manifest"><a href="#App-Manifest" class="headerlink" title="App Manifest"></a>App Manifest</h2><p>添加 manifest.json 文件。<br>为了让 PWA 应用被添加到主屏幕, 使用 manifest.json 定义应用的名称, 图标等等信息。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"pwa名称"</span>,</span><br><span class="line">  <span class="attr">"short_name"</span>: <span class="string">"pwa名称"</span>,</span><br><span class="line">  <span class="attr">"display"</span>: <span class="string">"standalone"</span>,</span><br><span class="line">  <span class="attr">"start_url"</span>: <span class="string">"/"</span>,</span><br><span class="line">  <span class="attr">"theme_color"</span>: <span class="string">"#8888ff"</span>,</span><br><span class="line">  <span class="attr">"background_color"</span>: <span class="string">"#aaaaff"</span>,</span><br><span class="line">  <span class="attr">"icons"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"e.png"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"256x256"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"image/png"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后引入到 html 的 head 中，<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"manifest"</span> <span class="attr">href</span>=<span class="string">"manifest.json"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="Service-Worker-1"><a href="#Service-Worker-1" class="headerlink" title="Service Worker"></a>Service Worker</h2><p>主要操作是：</p><ol><li>注册完成安装 Service Worker 时, 抓取资源写入缓存； </li><li>网页抓取资源的过程中, 在 Service Worker 可以捕获到 fetch 事件, 编写代码如何响应资源的请求；</li><li>最后一步是更新静态资源的功能。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (navigator.serviceWorker != <span class="literal">null</span>) &#123;</span><br><span class="line">  navigator.serviceWorker.register(<span class="string">'sw.js'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">registration</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Registered events at scope: '</span>, registration.scope);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sw.js</span></span><br><span class="line"><span class="keyword">var</span> cacheStorageKey = <span class="string">'minimal-pwa-1'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cacheList = [</span><br><span class="line">  <span class="string">'/'</span>,</span><br><span class="line">  <span class="string">'index.html'</span>,</span><br><span class="line">  <span class="string">'style.css'</span>,</span><br><span class="line">  <span class="string">'img.png'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抓取资源写入缓存</span></span><br><span class="line">self.addEventListener(<span class="string">'install'</span>, e =&gt; &#123;</span><br><span class="line">  e.waitUntil(</span><br><span class="line">    caches.open(cacheStorageKey)</span><br><span class="line">    .then(<span class="function"><span class="params">cache</span> =&gt;</span> cache.addAll(cacheList))</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> self.skipWaiting());</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 捕获到 fetch 事件, 编写代码如何响应资源的请求</span></span><br><span class="line">self.addEventListener(<span class="string">'fetch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.respondWith(</span><br><span class="line">    caches.match(e.request).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (response != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> fetch(e.request.url);</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新静态资源</span></span><br><span class="line">self.addEventListener(<span class="string">'activate'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.waitUntil(</span><br><span class="line">    <span class="built_in">Promise</span>.all(</span><br><span class="line">      caches.keys().then(<span class="function"><span class="params">cacheNames</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cacheNames.each(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (name !== cacheStorageKey) &#123;</span><br><span class="line">            <span class="keyword">return</span> caches.delete(name);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    ).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> self.clients.claim();</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以上的功能都准备好就可以简单的生成一个 PWA 的网站了。可以使用支持 PWA 的手机进行预览，根据提示增加到桌面。<br>通过以上短短不到100行的代码，就可以简单实现网站对于 PWA 的支持。大家通过阅读可以自己尝试去写一写，在实际环境中进行更深入的理解。</p><h1 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h1><ol><li><a href="https://developers.google.cn/web/fundamentals/primers/service-workers/?hl=zh-cn" target="_blank" rel="noopener">服务工作线程：简介</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ServiceWorker" target="_blank" rel="noopener">Web 技术文档 Web API 接口 ServiceWorker</a></li><li><a href="http://www.zhangxinxu.com/wordpress/2017/07/service-worker-cachestorage-offline-develop/" target="_blank" rel="noopener">借助Service Worker和cacheStorage缓存及离线开发</a></li><li><a href="https://lzw.me/a/pwa-service-worker.html" target="_blank" rel="noopener">网站渐进式增强体验(PWA)改造：Service Worker 应用详解</a></li><li><a href="https://zhuanlan.zhihu.com/p/25524382" target="_blank" rel="noopener">PWA 入门: 理解和创建 Service Worker 脚本</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前言：&lt;br&gt;上周做了一个预约健身卡的项目，在领导的指引下使用了 &lt;a href=&quot;https://lavas.baidu.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LAVAS&lt;/a&gt; 框架，这个框架的主要特点就是可以直接生成一套成熟的支持 PWA 的网站。&lt;br&gt;在开发过程中，发现 PWA 方案的主要核心技术在于 Service Worker，我下面将从 PWA 方案的简介、PWA 方案的相关技术等2个方向简单介绍一下我对于本次开发的收获。&lt;br&gt;在介绍完这些技术后，我将在最后的篇幅里介绍一个简单 PWA 方案的详细实现。&lt;br&gt;
    
    </summary>
    
    
      <category term="Service Worker" scheme="https://fx-team.github.io/tags/Service-Worker/"/>
    
  </entry>
  
  <entry>
    <title>前端技术周刊 - 2018/01/26</title>
    <link href="https://fx-team.github.io/2018/01/26/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%91%A8%E5%88%8A-2018-01-26/"/>
    <id>https://fx-team.github.io/2018/01/26/前端技术周刊-2018-01-26/</id>
    <published>2018-01-26T06:05:55.000Z</published>
    <updated>2018-02-11T07:57:39.477Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://risingstars.js.org/2017/zh/#section-all" target="_blank" rel="noopener">2017年 JavaScript 明星项目</a><br><em>通过对比各项目过去 12 个月在 GitHub 上新增 Star 数量，来评估其在 2017 年度的受关注程度，进而选出2017 年度 JavaScript 领域崛起的明星项目。Vue.js 再次强势登顶年度排行榜冠军，今年在 GitHub 上新增了超过 40,000 的 star。</em></p><p><a href="https://segmentfault.com/a/1190000012902394" target="_blank" rel="noopener">React Native 网络层分析</a><br><em>“在使用 React Native 开发中，我们熟练的采用 JavaScript 的方式发送请求的方式发送一个请求到服务端，但是处理这个请求的过程其实和处理 Web 应用中发送的请求的过程是不一样的。”</em></p><p><a href="https://qianduan.group/posts/5a5f89cb0cf6b624d2239c65" target="_blank" rel="noopener">Web 前端中的增强现实（AR）开发技术</a><br><em>增强现实（以下简称 AR）浪潮正滚滚而来，Web 浏览器作为人们最唾手可得的人机交互终端，正在大力发展 AR 技术。很多 Web 前端工程师也在寻求职业转型，于是我把我近半年的相关调研结果在此汇结成文。</em></p><p><a href="https://segmentfault.com/a/1190000012720317" target="_blank" rel="noopener">GraphQL 搭配 Koa 最佳入门实践</a><br><em>GraphQL 一种用为你 API 而生的查询语言，2018已经到来，PWA还没有大量投入生产应用之中就已经火起来了，GraphQL 的应用或许也不会太远了。前端的发展的最大一个特点就是变化快，有时候应对各种需求场景的变化，不得不去对接口开发很多版本或者修改。各种业务依赖强大的基础数据平台快速生长，如何高效地为各种业务提供数据支持，是所有人关心的问题。而且现在前端的解决方案是将视图组件化，各个业务线既可以是组件的使用者，也可以是组件的生产者，如果能够将其中通用的内容抽取出来提供给各个业务方反复使用，必然能够节省宝贵的开发时间和开发人力。那么问题来了，前端通过组件实现了跨业务的复用，后端接口如何相应地提高开发效率呢？GraphQL，就是应对复杂场景的一种新思路。</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://risingstars.js.org/2017/zh/#section-all&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2017年 JavaScript 明星项目&lt;/a&gt;&lt;br&gt;&lt;em&gt;通过对比各项目过去 12 个月
      
    
    </summary>
    
    
      <category term="技术周刊" scheme="https://fx-team.github.io/tags/%E6%8A%80%E6%9C%AF%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>WebSocket 介绍以及配合 STOMP 的使用</title>
    <link href="https://fx-team.github.io/2018/01/21/websocket%E4%BB%8B%E7%BB%8D%E4%BB%A5%E5%8F%8A%E9%85%8D%E5%90%88Stomp%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://fx-team.github.io/2018/01/21/websocket介绍以及配合Stomp的使用/</id>
    <published>2018-01-20T17:09:54.000Z</published>
    <updated>2018-02-11T07:57:39.477Z</updated>
    
    <content type="html"><![CDATA[<p>由于近期需要使用 WebSocket 的部分功能，然而在工作过程中，发现自己对这部分知识点不是很了解，而且对于后台同学提出的 WebSocket 和 STOMP 的组合，不知如何下手。经过相关资料查证，分享与大家，如有纰漏，希望不吝指出。<br>本文行文为三个部分，分别讲述：Socket 是什么，WebSocket 是什么，STOMP 是什么，如何结合后两者投入使用。  </p><h2 id="1-Socket"><a href="#1-Socket" class="headerlink" title="1. Socket"></a>1. Socket</h2><p>目前来说，我们经常说的 Socket 的有好几种意思，而且这几种意思还都与通信有关，他们分别是： </p><ol><li>Socket 连接<br>socket 连接，是端到端的一种连接方式，连接上之后，双方可以互发数据，完成交互；socket 连接的建立也是一个三次握手的过程，经过这个过程之后，双方都可以通过事件监听来获取来自对方的消息(connect, data, close …）,也可以主动发送消息给对方（Socket.write）。Socket 连接在不同语言的网络模块均有提供，以上方法都是 node 的 net 模块提供的一些方法和事件，可以用来建立一个完整的 socket 连接。</li><li>Socket 抽象封装层<br>这一种意思是说，它是作为我们所说的网络分层结构里面的，网络层和应用层之间的一层抽象封装。它的作用，就是将功能强大的网络层的操作做了一个封装，将其复杂的操作，抽象为几个简单的接口供应用层调用，以实现进程在网络中通信。按照网络上流行的说法，TCP/IP（网络层）是功能强大的发动机引擎，Socket 层是汽车，我们只需要动动方向盘，就能调动起强大的引擎为我所用。</li><li>套接字<br>这个部分，说的是 Socket 连接建立起来之后，双方维护的一个对象，用来发送和接受数据包。一个 Socket 连接建立，对应的是连接两端对应的一对套接字对象，其维护的信息为：连接使用的协议，本地主机的 IP 地址，本地进程的协议端口，远地主机的 IP 地址，远地进程的协议端口。通过如上信息，即可确定传输的位置和传输的方式。  </li></ol><h2 id="2-WebSocket"><a href="#2-WebSocket" class="headerlink" title="2. WebSocket"></a>2. WebSocket</h2><ol><li>是什么<br>WebSocket 是 H5 规范提出的一种应用层协议（与 HTTP 处于同一层级），是建立在 TCP/IP 协议族之上的一种长连接，可进行全双工通信。  </li><li>为什么需要它<br>它的提出确实是极其必要的。主要有两方面的考虑：一是，在H5规范的描述下，web应该是一个丰富多彩的世界，能提供应用程序级别的使用体验。既然是应用程序级别体验，自然应该有应用程序级别的网络基础支持，而这种支持就应该包含长连接，实时通信这种级别的支持；二是，使用目前的 HTTP 协议，模拟出两端长连接的效果（轮询，阻塞），消耗太大。</li><li><p>实现的过程<br>WebSocket 连接实现的过程分为两个部分：建立连接的过程，连接之后的 Socket 通信过程。<br>WebSocket 连接建立的过程，是用到了 HTTP 请求的。在一开始建立连接的过程中，希望建立连接的客户端会向服务端发送一个 HTTP 请求，询问服务器是不是支持 WebSocket，并且告诉服务端，我使用 WebSocket 请求，希望服务端进行相应的响应。<br>此处为了区分普通的 HTTP 请求，此处上传了其他的头部信息：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 随机生产的 Base64 字符串，用于安全校验</span><br><span class="line">Sec-WebSocket-Key：n0seXxkGzvDzqsH8ZkDfcg==</span><br><span class="line">// 指定子协议和版本号</span><br><span class="line">Sec-WebSocket-Protocol：v10.stomp, v11.stomp</span><br><span class="line">Sec-WebSocket-Version：13</span><br><span class="line">// 请求服务器升级为WebSocket</span><br><span class="line">Connection:Upgrade</span><br><span class="line">Upgrade：WebSocket</span><br><span class="line"></span><br><span class="line">// 服务端的回应</span><br><span class="line">Connection:Upgrade</span><br><span class="line">Sec-WebSocket-Accept:8BiqnztuCvGwd9ine9abKXjtzE0=</span><br><span class="line">Sec-WebSocket-Protocol:v10.stomp</span><br><span class="line">Upgrade:WebSocket</span><br></pre></td></tr></table></figure><p>在客户端校验 Sec-WebSocket-Accept 通过之后，连接即可建立完成。这之后的信息通讯均是WebSocket定义的通过长连接进行的，而且此长连接会复用刚才 HTTP 请求建立的 TCP 长连接。之后的消息发送，消息接受，连接建立，连接关闭等交互，与 Socket 基本类似。  </p></li><li><p>如何使用 node 搭建一个简单的ws服务器<br>此处的 demo 是，通过 sockjs，建立一个ws服务器，连接两个或者多个客户端，当某一个客户端发送消息给服务器，服务器可以主动将该消息发送给别的客户端。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 服务端主要代码</span><br><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line">var sockjs = require(&apos;sockjs&apos;);</span><br><span class="line"></span><br><span class="line">// 建立 socket 连接</span><br><span class="line">var sockjs_opts = &#123;sockjs_url: &quot;http://cdn.jsdelivr.net/sockjs/1.0.1/sockjs.min.js&quot;&#125;;</span><br><span class="line"></span><br><span class="line">var sockjs_echo = sockjs.createServer(sockjs_opts);</span><br><span class="line">sockjs_echo.on(&apos;connection&apos;, function(conn) &#123;</span><br><span class="line">    conn.on(&apos;data&apos;, function(message) &#123;</span><br><span class="line">        conn.write(message);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">sockjs_echo.installHandlers(server, &#123;prefix:&apos;/echo&apos;&#125;);</span><br><span class="line">server.listen(9999, &apos;0.0.0.0&apos;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 客户端主要代码</span><br><span class="line">var sockjs_url = &apos;/echo&apos;;</span><br><span class="line">var sockjs = new SockJS(sockjs_url);</span><br><span class="line"></span><br><span class="line">sockjs.onopen    = function()  &#123;print(&apos;[*] open&apos;, sockjs.protocol);&#125;;</span><br><span class="line">sockjs.onmessage = function(e) &#123;print(&apos;[.] message&apos;, e.data);&#125;;</span><br><span class="line">sockjs.onclose   = function()  &#123;print(&apos;[*] close&apos;);&#125;;</span><br><span class="line"></span><br><span class="line">// 产生交互信息</span><br><span class="line">sockjs.send(‘some message’);</span><br></pre></td></tr></table></figure></li></ol><p>点击查看<a href="https://github.com/chirsen/sockjs-node/tree/master/examples" target="_blank" rel="noopener">sockjs官方完整demo</a></p><h2 id="3-STOMP"><a href="#3-STOMP" class="headerlink" title="3. STOMP"></a>3. STOMP</h2><p>Simple (or Streaming) Text Orientated Messaging Protocol，简单(流)文本定向消息协议，它提供了一个可互操作的连接格式，允许 STOMP 客户端与任意 STOMP 消息代理（Broker）进行交互。 简单来说，就好像HTTP定义了TCP的相关细节一样，STOMP在WebSocket协议之上，告诉信息交互的双方，消息的格式是什么，应该怎样收发的文本协议。具体的定义内容为：<br>STOMP 是基于 frame（帧）的协议，每个frame都包含了一个 command，一系列的可选 headers 和消息本身的 body，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">COMMAND</span><br><span class="line">header1:value1</span><br><span class="line">header2:value2</span><br><span class="line"></span><br><span class="line">Body^@</span><br></pre></td></tr></table></figure></p><p> 上面的空行部分必需，分割 headers 和 body。除了上述的帧内容的定义，协议还对不同的操作定义了不同 COMMAND 的帧。<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 客户端：</span><br><span class="line">SEND// 发送消息到服务端，可添加自定义的 header，body 携带内容</span><br><span class="line">SUBSCRIBE// 用于注册给定目的地send帧，被注册的目的地收到任何消息豆浆通过MESSAGE帧发送过来</span><br><span class="line">UNSUBSCRIBE// 取消注册监听</span><br><span class="line">BEGIN// 事务操作开始</span><br><span class="line">COMMIT// 事务提交</span><br><span class="line">ABORT// 事务过程中的回滚</span><br><span class="line">ACK// 确认订阅消息的消费</span><br><span class="line">NACK// NACK有ACK相反地作用。它地作用是告诉 server client 不想消费这个消息</span><br><span class="line">DISCONNECT// 断开连接</span><br><span class="line">// 服务端</span><br><span class="line">CONNECT// 连接建立</span><br><span class="line">RECEIPT// server 成功处理请求带有 receipt 的 client frame 后的返回</span><br><span class="line">ERROR// 如果出错的话，server将发送ERRORframe</span><br><span class="line">MESSAGE// 将订阅的消息发送给client</span><br></pre></td></tr></table></figure></p><p>更多命令详解，可参考<a href="http://blog.csdn.net/joeysheng/article/details/51970233" target="_blank" rel="noopener">STOMP协议参考</a></p><h2 id="4-结合使用"><a href="#4-结合使用" class="headerlink" title="4. 结合使用"></a>4. 结合使用</h2><p>在了解了上诉两个协议之后，我们需要把两方结合起来，让 WebSocket 消息操作变得规范，可控，易于理解。因为 STOMP 协议和 WebSocket 都有已经实现了且可靠的库，在这里我们直接采用。WebSocket 采用 sockjs，STOMP 采用 stompjs。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">// 服务端主要代码：</span><br><span class="line">var http = require(&quot;http&quot;);</span><br><span class="line">var StompServer = require(&apos;stomp-broker-js&apos;);</span><br><span class="line"></span><br><span class="line">var server = http.createServer();</span><br><span class="line"></span><br><span class="line">server.listen(61614);</span><br><span class="line"></span><br><span class="line">var stompServer = new StompServer(&#123;</span><br><span class="line">  server: server,</span><br><span class="line">  path: &apos;/stomp&apos;</span><br><span class="line">&#125;);</span><br><span class="line">// 将监听的客户端放入列表中，方便服务端在接受到消息之后进行转发</span><br><span class="line">stompServer.on(&apos;connected&apos;, function(sessionId, headers)&#123;</span><br><span class="line">  var clientId = headers.clientId;</span><br><span class="line">  if(clientId) &#123;</span><br><span class="line">    clients.push(clientId);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">stompServer.on(&apos;error&apos;, function(error) &#123;</span><br><span class="line">  // 将订阅对象减少一个(错误对象)</span><br><span class="line">  clients.splice(clients.length - 1, 1);</span><br><span class="line">  return;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 在每次对应的 roomid 频道收到消息时，转发给所有的订阅者</span><br><span class="line">stompServer.subscribe(config.desination, function(msg, headers) &#123;</span><br><span class="line">  for(var i = 0; i &lt; clients.length; i++) &#123;</span><br><span class="line">    // 如果时debug，打印每次的请求和消息</span><br><span class="line">    if(config.debug) &#123;</span><br><span class="line">      console.log(&apos;header: \n&apos; + headers);</span><br><span class="line">      console.log(&apos;msg: \n&apos; + msg);</span><br><span class="line">    &#125;</span><br><span class="line">    // 消息转发</span><br><span class="line">    stompServer.send(clients[i], &#123;&apos;content-type&apos;: &apos;application/json&apos;&#125;, JSON.stringify(&#123;</span><br><span class="line">      headers: headers,</span><br><span class="line">  msg: msg</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>此处的服务端代码，是直接传入创建的 server，即可使得 server 支持 STOMP 协议。其实在这一步时做了很多工作。其中就有，调用 stompjs 库，将 sockjs 的消息发送用 stomp 进行改写，将 WebSocket 的方法统统用 STOMP 协议的方法进行了包装一遍。这里举消息包装和方法包装的例子说明。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">// 当调用 websocket 的 send 方法的时候</span><br><span class="line">this.send = function (topic, headers, body) &#123;</span><br><span class="line">  // 将消息内容组装成 stomp 协议的一帧</span><br><span class="line">  var _headers = &#123;&#125;;</span><br><span class="line">  if (headers) &#123;</span><br><span class="line">    for (var key in headers) &#123;</span><br><span class="line">      _headers[key] = headers[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  var frame = &#123;</span><br><span class="line">    body: body,</span><br><span class="line">    headers: _headers</span><br><span class="line">  &#125;;</span><br><span class="line">  var args = &#123;</span><br><span class="line">    dest: topic,</span><br><span class="line">    frame: this.frameParser(frame)</span><br><span class="line">  &#125;;</span><br><span class="line">  this.onSend(selfSocket, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">this.onSend = function (socket, args, callback) &#123;</span><br><span class="line">  ...</span><br><span class="line">  this.emit(&apos;send&apos;, &#123;frame: &#123;headers: frame.headers, body: bodyObj&#125;, dest: args.dest&#125;);</span><br><span class="line">  // 将消息发送给订阅方</span><br><span class="line">  this._sendToSubscriptions(socket, args);</span><br><span class="line">  if (callback) &#123;</span><br><span class="line">    callback(true);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">this._sendToSubscriptions = function (socket, args) &#123;</span><br><span class="line">  ...</span><br><span class="line">  // 确定订阅方，凭借上 command，进行发送</span><br><span class="line">  args.frame.command = &quot;MESSAGE&quot;;</span><br><span class="line">  var sock = sub.socket;</span><br><span class="line">  if (sock !== undefined) &#123;</span><br><span class="line">    stomp.StompUtils.sendFrame(sock, args.frame);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    this.emit(sub.id, args.frame.body, args.frame.headers);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">// 发送的时候，还是采用 WebSocket 的发送</span><br><span class="line">function sendFrame(socket, _frame) &#123;</span><br><span class="line">  var frame_str = null;</span><br><span class="line">  if (!_frame.hasOwnProperty(&apos;toString&apos;)) &#123;</span><br><span class="line">    var frame = new Frame(&#123;</span><br><span class="line">      &apos;command&apos;: _frame.command,</span><br><span class="line">      &apos;headers&apos;: _frame.headers,</span><br><span class="line">      &apos;body&apos;: _frame.body</span><br><span class="line">    &#125;);</span><br><span class="line">    frame_str = frame.toString();</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    frame_str = _frame.toString();</span><br><span class="line">  &#125;</span><br><span class="line">  // WebSocket 发送</span><br><span class="line">  socket.send(frame_str);</span><br><span class="line">  return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// 客户端主要代码:</span><br><span class="line">var url = &quot;ws://localhost:61614/stomp&quot;;</span><br><span class="line">var client = Stomp.client(url);</span><br><span class="line"></span><br><span class="line">function afterConnect(roomid) &#123;</span><br><span class="line">  btn.addEventListener(&apos;click&apos;, function () &#123;</span><br><span class="line">    var msg = input.value;</span><br><span class="line">    // 发送信息</span><br><span class="line">    client.send(roomid, &#123;&#125;, msg);</span><br><span class="line">  &#125;, false);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function createConnect(roomid, uid) &#123;</span><br><span class="line">  client.connect(headers, function (error) &#123;</span><br><span class="line">    if (error.command == &quot;ERROR&quot;) &#123;</span><br><span class="line">      console.error(error.headers.message);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      afterConnect(roomid);</span><br><span class="line">      // 订阅自己的客户端id，方便收到服务器发送过来的信息</span><br><span class="line">      client.subscribe(uid, function (msg) &#123;</span><br><span class="line">        var body = msg.body;</span><br><span class="line">        if (msg.headers[&apos;content-type&apos;] == &apos;application/json&apos;) &#123;</span><br><span class="line">          body = JSON.parse(msg.body)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击查看<a href="https://github.com/chirsen/stomp-ws-server" target="_blank" rel="noopener">完整demo</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在各方面了解完 WebSocket 和 STOMP 相关内容之后，其实我们可以发现，STOMP 是个很简单的协议，但是这个简单协议却能有效的规约前后端的交互过程，使交互过程清晰有效。这种用简单高效的抽象，完成通用复杂的工作的方法，其实是很值得我们去借鉴的。另外，在完成这部分内容的探索学习过程中，还顺便学习了一下 npm 包发布的相关内容。感觉学习新东西确实是总能给人带来益处，大家加油！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于近期需要使用 WebSocket 的部分功能，然而在工作过程中，发现自己对这部分知识点不是很了解，而且对于后台同学提出的 WebSocket 和 STOMP 的组合，不知如何下手。经过相关资料查证，分享与大家，如有纰漏，希望不吝指出。&lt;br&gt;本文行文为三个部分，分别讲述
      
    
    </summary>
    
    
      <category term="WebSocket, STOMP" scheme="https://fx-team.github.io/tags/WebSocket-STOMP/"/>
    
  </entry>
  
  <entry>
    <title>前端技术周刊 - 2018/01/19</title>
    <link href="https://fx-team.github.io/2018/01/19/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%91%A8%E5%88%8A-2018-01-19/"/>
    <id>https://fx-team.github.io/2018/01/19/前端技术周刊-2018-01-19/</id>
    <published>2018-01-19T08:14:41.000Z</published>
    <updated>2018-02-11T07:57:39.477Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/32782686" target="_blank" rel="noopener">从前端技术到体验科技</a><br><em>来自玉伯的分享：体验科技，是技术与设计的融合，是服务与用户连接。体验科技是 UX = f(services) 这个公式，能将各种各种的 services（后端服务） 通过技术与设计的融合，转变成体验一流的用户产品。</em></p><p><a href="https://juejin.im/post/5a6155126fb9a01cb64edb45" target="_blank" rel="noopener">Event Loop的规范和实现</a><br><em>Event Loop 是前端的一个比较重要、基础的概念，本文从 Event Loop 规范、实现、应用三个方面进行展开，对于巩固、夯实基础有一定帮助。</em></p><p><a href="https://juejin.im/post/5a5b2a5c6fb9a01cbc6e59f9" target="_blank" rel="noopener">重构 - 代码整洁之道</a><br><em>重构技巧与实践。我们需要明确的一点是: 重构不是一件应该特地拨出一段时间来做的事情。重构不是目的，但是重构可以帮助你把事情做好。</em></p><p><a href="https://webfe.kujiale.com/web-video-player/" target="_blank" rel="noopener">从零开始写一个 Web 视频播放器</a><br><em>本文记录了作者实现 Web 视频播放器的过程。</em></p><p><a href="https://blog.risingstack.com/node-js-development-tips-2018/" target="_blank" rel="noopener">8 个 2018 构建 Node.js 应用的建议</a><br><em>本文收集了作者认为 Node.js 开发者在 2018 年需要知道的技巧，这些建议包括使用 async-await, 尝试 import 与 import(), 尝试 HTTP/2，加固你的 Node.js 应用等等。</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/32782686&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;从前端技术到体验科技&lt;/a&gt;&lt;br&gt;&lt;em&gt;来自玉伯的分享：体验科技，是技术与设计的融合，是服务与用户连接。体验科技
      
    
    </summary>
    
    
      <category term="技术周刊" scheme="https://fx-team.github.io/tags/%E6%8A%80%E6%9C%AF%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>前端浏览器存储初探</title>
    <link href="https://fx-team.github.io/2018/01/13/%E5%89%8D%E7%AB%AF%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AD%98%E5%82%A8%E5%88%9D%E6%8E%A2/"/>
    <id>https://fx-team.github.io/2018/01/13/前端浏览器存储初探/</id>
    <published>2018-01-13T08:43:17.000Z</published>
    <updated>2018-02-11T07:57:39.478Z</updated>
    
    <content type="html"><![CDATA[<p>随着现代化浏览器的发展，客户端的能力已经有了很大的提升，比如 Chrome、Firefox，通过 webkit 等内核的发展与版本的迭代与升级，浏览器变得越来越强大。对于前端来说，由于浏览器的升级所能做的事情越来越多，我们在数据存储方面也就有很多方案可以选择，大概有以下几种方式：</p><ul><li>cookie</li><li>localStorage</li><li>sessionStorage</li><li>indexedDB</li><li>PWA</li><li>service worker</li></ul><p><strong><font color="brown">数据存储终究是基于具体的业务场景的，那么我们应该如何有针对性的进行选择呢?</font></strong></p><p>要想在不同的技术方案中选择出适合自己的场景的应用方案，首先需要对不同的技术概念以及它所适用的场景有足够的掌握，我们接下来就对上述提到的技术点依次做介绍与分析。</p><h3 id="1-cookie"><a href="#1-cookie" class="headerlink" title="1. cookie"></a>1. cookie</h3><p>cookie 产生的原因是什么呢？<br>答：HTTP 请求是<strong>无状态的。</strong>所以服务端无法记住当前的 HTTP 请求与之前的请求有什么联系，这样所造成的后果就是服务端无法对用户信息以及登录状态进行维护。而 cookie 的产生使得服务端可以区分当前是哪个客户端发起的请求。</p><p>cookie 的生成方式：</p><ul><li>http response header 中的 set-cookie 由服务端发出，客服端存储。</li><li>js 中可以通过 document.cookie 可以读写 cookie</li></ul><p>cookie 存储的限制：</p><ul><li>作为浏览器存储，大小为 4KB 左右</li><li>需要设置过期时间 expire</li></ul><p>cookie 还存在两个属性，分别是 expire 与 httponly。</p><p><strong>在性能优化方面，cookie 能做些什么呢？</strong><br>cookie 是存储在主域名下面的，这样会造成一定程度的CDN流量损耗。那我们应当怎样去解决呢？其实，解决方式也很简单，我们只需<strong>将CND域名与主站域名独立开</strong>就可以了。<br>下面两张图分别是百度和优酷对于 cookie 的应用，很明显，优酷是一个 bad case。<br><img src="/2018/01/13/前端浏览器存储初探/baidu_cookie.jpg" title="百度 cookie 示例"><br><img src="/2018/01/13/前端浏览器存储初探/youku_cookie.jpg" title="优酷 cookie 示例"></p><h3 id="2-localStorage"><a href="#2-localStorage" class="headerlink" title="2. localStorage"></a>2. localStorage</h3><ul><li>HTML5设计出来专门用于浏览器存储的</li><li>大小为 5M 左右</li><li>仅在客户端使用，不和服务端进行通信</li><li>有较好的接口封装</li></ul><h3 id="3-sessionStorage"><a href="#3-sessionStorage" class="headerlink" title="3. sessionStorage"></a>3. sessionStorage</h3><ul><li>会话级别的浏览器存储（浏览器的一个 tab 就是一个会话）</li><li>对于表单信息的维护</li></ul><h3 id="4-indexedDB（使用较少）"><a href="#4-indexedDB（使用较少）" class="headerlink" title="4. indexedDB（使用较少）"></a>4. indexedDB（使用较少）</h3><ul><li>用于客户端存储大量的结构化的数据，该 API 使用索引实现对数据的高性能搜索。</li><li>为应用创建离线版本。</li></ul><h3 id="5-PWA（谷歌提出，已经达到了与安卓同样重要的程度）"><a href="#5-PWA（谷歌提出，已经达到了与安卓同样重要的程度）" class="headerlink" title="5. PWA（谷歌提出，已经达到了与安卓同样重要的程度）"></a>5. PWA（谷歌提出，已经达到了与安卓同样重要的程度）</h3><p>PWA是一种 Web App 新模型，并不是指具体的某一种技术或单一的知识点，是通过一系列的web新特性配合优秀的UI交互设计，逐步的增强 Web App 的用户体验。<br>它所提出的标准主要针对以下几方面：</p><ul><li>可靠性 无网络情况下提供基本页面的访问</li><li>快速 针对页面渲染以及数据访问（转场动画）</li><li>融入 增加到手机桌面 全屏、推送等特性</li></ul><h3 id="6-service-workers"><a href="#6-service-workers" class="headerlink" title="6. service workers"></a>6. service workers</h3><p>JS ———— 单线程（在用户层面无法创建多线程）=&gt; 大量数据的获取或者前端相关的运算（3D模型数据） =&gt; JS阻塞 =&gt; 有可能影响UI层面的渲染</p><p>一个 service worker 是一段运行在浏览器后台进程里的脚本，它独立于当前页面，提供了一些不需要与web页面交互的功能，即那种在网页背后悄悄执行的能力。在将来，基于它可以实现消息推送，静默更新等服务，但是目前它首先要具备的功能是拦截和处理网络请求，包括可编程的响应缓存管理。<br>应用场景：</p><ul><li>应用于离线化（拦截请求）</li><li>与主页面进行通信</li></ul><p>下面的两个链接可以用于我们在浏览器中查看正在运行中的service worker：<br>chrome://inspect/#service-workers<br>chrome://serviceworker-internals/</p><p>接下来我们具体看两个 service worker应用的例子：</p><ul><li><strong>应用于离线化的例子</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--serviceWorker.html--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"./main.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>service worker<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    service worker</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./serviceWorker.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// service worker 注册</span></span><br><span class="line"><span class="keyword">if</span> (navigator.serviceWorker) &#123;</span><br><span class="line">  navigator.serviceWorker.register(<span class="string">'./serviceWorkerConfig.js'</span>, &#123;<span class="attr">scope</span>: <span class="string">'./'</span>&#125;)</span><br><span class="line">      .then(<span class="function">(<span class="params">reg</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(reg);</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e);</span><br><span class="line">      &#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  alert(<span class="string">"service worker is not supported!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将文件添加至缓存</span></span><br><span class="line">self.addEventListener(<span class="string">'install'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.waitUntil(</span><br><span class="line">    caches.open(<span class="string">'service-worker-v1'</span>).then(<span class="function">(<span class="params">cache</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'open cache'</span>);</span><br><span class="line">      <span class="keyword">return</span> cache.addAll([<span class="string">'./serviceWorker.js'</span>, <span class="string">'./main.css'</span>, <span class="string">'./serviceWorker.html'</span>])</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 读取缓存</span></span><br><span class="line">self.addEventListener(<span class="string">'fetch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e);</span><br><span class="line">  <span class="comment">// 改变返回的数据</span></span><br><span class="line">  e.respondWith(</span><br><span class="line">    caches.match(e.request).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (res) &#123;</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 通过fetch向网络发起请求</span></span><br><span class="line">        fetch(url).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (res) &#123;</span><br><span class="line">            <span class="comment">// 将返回的文件存至缓存</span></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 用户提示</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>通过以上代码的展示，我们便用service worker实现了将静态文件存至缓存，从而完成应用的离线化。</p><ul><li><strong>与主页面进行通信</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--message.html--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"msg-box"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"msg-input"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"send-msg"</span>&gt;</span>发送<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"msg-app.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// msg-app.js</span></span><br><span class="line"><span class="keyword">if</span> (navigator.serviceWorker) &#123;</span><br><span class="line">  <span class="keyword">let</span> sendBtn = <span class="built_in">document</span>.getElementById(<span class="string">'send-msg'</span>);</span><br><span class="line">  <span class="keyword">let</span> msgInput = <span class="built_in">document</span>.getElementById(<span class="string">'msg-input'</span>);</span><br><span class="line">  <span class="keyword">let</span> msgBox = <span class="built_in">document</span>.getElementById(<span class="string">'msg-box'</span>);</span><br><span class="line"></span><br><span class="line">  sendBtn.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="comment">// 将input框中的信息发送给service worker</span></span><br><span class="line">    navigator.serviceWorker.controller.postMessage(msgInput.value);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  navigator.serviceWorker.addEventListener(<span class="string">'message'</span>, (event) =&gt; &#123;</span><br><span class="line">    msgBox.innerHTML += (<span class="string">`&lt;li&gt;<span class="subst">$&#123;event.data.message&#125;</span>&lt;/li&gt;`</span>)</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// service worker 注册</span></span><br><span class="line">  navigator.serviceWorker.register(<span class="string">'./msg-serviceWorker.js'</span>, &#123;<span class="attr">scope</span>: <span class="string">'./'</span>&#125;)</span><br><span class="line">      .then(<span class="function">(<span class="params">reg</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(reg);</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e);</span><br><span class="line">      &#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  alert(<span class="string">"service worker is not supported!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// msg-serviceWorker.js</span></span><br><span class="line">self.addEventListener(<span class="string">'message'</span>, (event) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> promise = self.clients.matchAll().then(<span class="function">(<span class="params">clientList</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> sendId = event.source ? event.source.id : <span class="string">'unknown'</span>;</span><br><span class="line">    clientList.forEach(<span class="function">(<span class="params">list</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (list.id === sendId) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        list.postMessage(&#123;</span><br><span class="line">          client: sendId,</span><br><span class="line">          message: event.data</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line">  event.waitUntil(promise);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我们可以清楚的看到，上面的代码通过监听 message 事件，service worker 可以达到与页面进行通信的目的，更多关于 service worker 的细节内容大家可以查阅更多的资料进行学习，<a href="https://www.w3ctech.com/topic/866" target="_blank" rel="noopener">Service Worker 入门</a>     </p><p>以上就是浏览器存储初探的全部内容，希望大家可以多多实践，文中有错误的地方，欢迎指正。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;随着现代化浏览器的发展，客户端的能力已经有了很大的提升，比如 Chrome、Firefox，通过 webkit 等内核的发展与版本的迭代与升级，浏览器变得越来越强大。对于前端来说，由于浏览器的升级所能做的事情越来越多，我们在数据存储方面也就有很多方案可以选择，大概有以下几种
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端技术周刊 - 2018/01/12</title>
    <link href="https://fx-team.github.io/2018/01/12/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%91%A8%E5%88%8A-2018.01.12/"/>
    <id>https://fx-team.github.io/2018/01/12/前端技术周刊-2018.01.12/</id>
    <published>2018-01-12T08:40:04.000Z</published>
    <updated>2018-02-11T07:57:39.478Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.w3ctech.com/topic/866" target="_blank" rel="noopener">Service Worker 入门</a><br><em>原生App拥有Web应用通常所不具备的富离线体验，定时的静默更新，消息通知推送等功能。而新的Service workers标准让在Web App上拥有这些功能成为可能。</em></p><p><a href="https://medium.mybridge.co/node-js-open-source-for-the-past-year-v-2018-757291e638ed" target="_blank" rel="noopener">2017 年发布的优秀 Node.js 开源项目盘点</a><br><em>2017 年里， Node.js 社区也愈发活跃；本文从 4700 多个去年发布的 Node.js 开源项目中，挑选出 25 个优秀的代表。这些项目涵盖了不同的功能方向，譬如 Headless Chrome Node API Puppeteer, 用于创建模拟数据的 faker.js，用于将 Node.js 项目打包为可执行文件的 Pkg，用于进行图片处理的 Sharp，用于进行 Docker 界面化管理的 Portainer 等等。</em></p><p><a href="https://isux.tencent.com/articles/isux-h5-in-iphone.html" target="_blank" rel="noopener">极速适配 iPhone X 秘笈</a><br><em>2017年9月苹果发布了iPhone X机型，对于它的“刘海儿”和底部Home Indicator，QQ空间H5也在第一时间做了兼容适配。在适配过程中，尝试的方案介绍。</em></p><p><a href="http://taobaofed.org/blog/2017/05/18/how-to-display-git-diff/" target="_blank" rel="noopener">如何实现一个 Git Diff 解析器</a><br><em>代码审阅中一个重要功能是对两个 commit 进行 diff 并展示到页面中，这篇文章将尝试总结其实现过程。</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.w3ctech.com/topic/866&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Service Worker 入门&lt;/a&gt;&lt;br&gt;&lt;em&gt;原生App拥有Web应用通常所不具备的富离线体验，定时的静默更新，
      
    
    </summary>
    
    
      <category term="技术周刊" scheme="https://fx-team.github.io/tags/%E6%8A%80%E6%9C%AF%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>Phaser开发游戏总结</title>
    <link href="https://fx-team.github.io/2018/01/08/Phaser%E5%BC%80%E5%8F%91%E6%B8%B8%E6%88%8F%E6%80%BB%E7%BB%93/"/>
    <id>https://fx-team.github.io/2018/01/08/Phaser开发游戏总结/</id>
    <published>2018-01-08T10:13:33.000Z</published>
    <updated>2018-02-11T07:57:39.476Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Phaser是一个非常好用的html5游戏开发框架，官网上是这样介绍的：“一个快速、免费并且完全开源的框架，提供Canvas和WebGL两种渲染方式，致力于增强桌面端与移动端浏览器游戏的体验”。</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="开始游戏的场景"><a href="#开始游戏的场景" class="headerlink" title="开始游戏的场景"></a>开始游戏的场景</h3><p>html5标准新加了一个 canvas标签，在canvas上我们可以通过js绘制各种各样的内容，游戏内包含着场景，精灵等要素。我们绘制了宽度600高度250，的一个canvas画布。游戏渲染模式使用Phaser.AUTO，也就是自动检测，在浏览器支持WebGL的时候使用WebGL渲染，不支持的时候回退到Canvas渲染。。并且加载了Splash场景，通过start，进入了Splash场景。等Splash场景结束后，我们可以通过<code>game.state.start(&#39;Main&#39;);</code>来加载Main场景实现场景之前的切换。在场景中有各种各样的方法来控制场景的展示，init方法，preload方法，create方法和update方法，分别管理当前场景的初始化、预加载、生成游戏对象以及更新游戏循环。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> game = <span class="keyword">new</span> Phaser.Game(<span class="number">600</span>, <span class="number">250</span> , Phaser.AUTO,<span class="string">""</span>);</span><br><span class="line"><span class="keyword">const</span> main = <span class="keyword">new</span> Phaser.State();</span><br><span class="line">game.state.add(<span class="string">'Splash'</span>, Splash);</span><br><span class="line">game.state.add(<span class="string">'Main'</span>, Main);</span><br><span class="line">game.state.start(<span class="string">'Splash'</span>);</span><br></pre></td></tr></table></figure><p>通过这些方法，就可以完成一个非常炫酷的Phaser游戏了</p><h3 id="丰富我们的游戏"><a href="#丰富我们的游戏" class="headerlink" title="丰富我们的游戏"></a>丰富我们的游戏</h3><p>初始化Init方法：启动物理引擎（ARCADE），这是Phaser框架自带的最简单的物理引擎，用于矩形盒的碰撞检测。。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">main.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    game.physics.startSystem(Phaser.Physics.ARCADE);</span><br><span class="line">    game.world.enableBody = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>预加载方法：加载各类游戏资源，并设置唯一id，被精灵引用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">game.load.image(<span class="string">'floor'</span>, <span class="string">'img/floor.png'</span>);</span><br></pre></td></tr></table></figure><p>生成游戏对象方法：生成游戏地图</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">main.create = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.floors = game.add.group();</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//floor</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> floor = game.add.sprite(<span class="number">30</span>*i, <span class="number">90</span>, <span class="string">'box'</span>,<span class="string">''</span>, <span class="keyword">this</span>.floors);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更新循环方法：通过方向键控制主角左右移动和跳跃，当主角撞到地板，做销毁处理，并且重新开始游戏。这样我们就完成一个简单的跳跃障碍物游戏。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">main.update = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    game.physics.arcade.overlap(<span class="keyword">this</span>.player, <span class="keyword">this</span>.floor, <span class="keyword">this</span>.kill, <span class="literal">null</span>, <span class="keyword">this</span>);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.cursor.left.isDown) </span><br><span class="line">        <span class="keyword">this</span>.player.body.velocity.x = <span class="number">-200</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.cursor.up.isDown &amp;&amp; <span class="keyword">this</span>.player.body.touching.down) </span><br><span class="line">        <span class="keyword">this</span>.player.body.velocity.y = <span class="number">-250</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Phaser开发游戏问题总结"><a href="#Phaser开发游戏问题总结" class="headerlink" title="Phaser开发游戏问题总结"></a>Phaser开发游戏问题总结</h2><h3 id="iPhone下游戏显示模糊"><a href="#iPhone下游戏显示模糊" class="headerlink" title="iPhone下游戏显示模糊"></a>iPhone下游戏显示模糊</h3><p>这是因为iPhone现在都是retina屏幕，在retina屏幕下，会用2个像素点的宽度去渲染图片的1个像素点，因此该图片在retina屏幕上实际会占据200x200像素的空间，相当于图片被放大了一倍，因此图片会变得模糊。所以我们在初始化canvas大小不应该是屏幕的 大小去渲染，使用屏幕大小俩倍做渲染，同时通过css来讲canvas缩小，就可以解决问题。也可以通过dpi来做渲染相应大小。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dpi = <span class="built_in">window</span>.devicePixelRatio || <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> width = <span class="built_in">document</span>.documentElement.clientWidth * dpi;</span><br><span class="line"><span class="keyword">const</span> height = <span class="built_in">document</span>.documentElement.clientHeight * dpi;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span> <span class="keyword">extends</span> <span class="title">Phaser</span>.<span class="title">Game</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>(width, height, Phaser.CANVAS, <span class="string">'content'</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="资源问题"><a href="#资源问题" class="headerlink" title="资源问题"></a>资源问题</h3><p>Phaser社区版本提供了 grunt打包工具，可以自行缩减比如常用 wap端游戏不需要的按键控制，多余的物理引擎，来缩小资源大小。<br>整个资源打包也可以通过webpack内置的压缩进行优化。<br>游戏的图片其实对于整个资源占比很大，对一些按钮，icon，标志图片等较小图片可以进行合图操作，减少大量的http请求，对一些超过1024*1024大小的图片进行些许压缩。</p><h3 id="内存优化"><a href="#内存优化" class="headerlink" title="内存优化"></a>内存优化</h3><ul><li>减少不必要的计算<ul><li>图片阴影，发光效果，添加mask效果，可以直接用图片替代</li><li>复杂文字效果使用图片</li></ul></li><li>游戏内不直接使用setTimeout setInterVal</li><li>精灵数量的控制和注意及时的销毁，保证内存不泄露</li><li>在主循环update逻辑做到<code>精简</code>，避免大片业务逻辑放到上面</li><li>动画不放到update里 比如位置移动，可以使用补间动画(tween)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">update() &#123;</span><br><span class="line">    sprite.x += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Phaser-学习资源"><a href="#Phaser-学习资源" class="headerlink" title="Phaser 学习资源"></a>Phaser 学习资源</h2><p><a href="https://github.com/orange-games" target="_blank" rel="noopener">Phaser插件合集</a><br><a href="http://www.phaser.io" target="_blank" rel="noopener">Phaser官网</a><br><a href="http://phaserengine.com" target="_blank" rel="noopener">Phaser中文官网</a><br><a href="https://github.com/channingbreeze/games" target="_blank" rel="noopener">Phaser小游戏合集</a><br><a href="https://github.com/lean/phaser-es6-webpack" target="_blank" rel="noopener">Phaser webpack配置</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Phaser是一个非常好用的html5游戏开发框架，官网上是这样介绍的：“一个快速、免费并且完全开源的框架，提供Canvas和WebGL两种
      
    
    </summary>
    
    
      <category term="游戏" scheme="https://fx-team.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>前端技术周刊 - 2018/01/05</title>
    <link href="https://fx-team.github.io/2018/01/05/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%91%A8%E5%88%8A-2018.01.05/"/>
    <id>https://fx-team.github.io/2018/01/05/前端技术周刊-2018.01.05/</id>
    <published>2018-01-05T10:13:33.000Z</published>
    <updated>2018-02-11T07:57:39.478Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://36kr.com/p/5110763.html" target="_blank" rel="noopener">2018 年最值得关注的 JavaScript 趋势</a><br><em>JavaScript渗透的范围越来越广，它能做的事情已经远不止前端开发而已。不久前stateofjs.com刚刚发布了2017 JavaScript现状报告，现在Ryan Chartrand非常应景地推出了2018年的JavaScript发展趋势，把这两份文章一起结合来看，相信作为JS开发者的你一定不再迷茫。</em></p><p><a href="https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651000212&amp;idx=1&amp;sn=753c242f4132347737fa854a514cfe35" target="_blank" rel="noopener">2017技术圈年度大事件盘点</a><br><em>年终总结的意义在于，总结过去，展望未来。在这即将过去的 2017 年，回顾技术圈年度大事件。</em></p><p><a href="https://zhuanlan.zhihu.com/p/32372885" target="_blank" rel="noopener">解读 2017 年终全球 JavaScript 技术调查结果</a><br><em>结合 stateofjs 公布的 2017 年关于 JavaScript 全球调查结果来解读下即将要过去的这一年的 JavaScript 技术相关情况。</em></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzIwNjQwMzUwMQ==&amp;mid=2247485600&amp;idx=1&amp;sn=12e229c90cc08e8f14dcc1ae7f27abd6" target="_blank" rel="noopener">PWA是否能带来新一轮大前端技术洗牌</a><br><em>对于 Native App 来说，其 最大的痛点是由于其天生封闭的基因，内容无法被索引，这会导致后续一系列的问题。而随着移动互联网的发展，用户下载 App 的热情也逐渐减弱，再加上用户 80% 的时间被 Top3 的超级 App 占据，对于站点来说，应用分发成本也因此越来越高了。相对于 Native App 的封闭，PWA 却是完全开放的——PWA 现有的所有技术都是遵循 W3C 的标准，完全开放，因此能够快速被站点接受、被浏览器快速支持。值得一提的是，为了解开传统 Web 的两个枷锁，除 PWA 之外，业界也诞生了很多技术方案，例如部分厂商推出的小程序技术。</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://36kr.com/p/5110763.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2018 年最值得关注的 JavaScript 趋势&lt;/a&gt;&lt;br&gt;&lt;em&gt;JavaScript渗透的范围越来越广，它能做的事情已
      
    
    </summary>
    
    
      <category term="技术周刊" scheme="https://fx-team.github.io/tags/%E6%8A%80%E6%9C%AF%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>新的开始</title>
    <link href="https://fx-team.github.io/2018/01/04/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
    <id>https://fx-team.github.io/2018/01/04/新的开始/</id>
    <published>2018-01-04T06:30:53.000Z</published>
    <updated>2018-02-11T07:57:39.485Z</updated>
    
    <content type="html"><![CDATA[<p>这是<strong>fx-team</strong>团队2018年的第一篇博客，新的一年朝着自己的目标前进。本博客用于记录<strong>fx-team</strong>日常学习、工作反思、开源作品等各个方面。</p><p>2018年乘风破浪，我们的征途是星辰大海。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是&lt;strong&gt;fx-team&lt;/strong&gt;团队2018年的第一篇博客，新的一年朝着自己的目标前进。本博客用于记录&lt;strong&gt;fx-team&lt;/strong&gt;日常学习、工作反思、开源作品等各个方面。&lt;/p&gt;
&lt;p&gt;2018年乘风破浪，我们的征途是星辰大海。&lt;/p
      
    
    </summary>
    
    
      <category term="点滴" scheme="https://fx-team.github.io/tags/%E7%82%B9%E6%BB%B4/"/>
    
  </entry>
  
</feed>
